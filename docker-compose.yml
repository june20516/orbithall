# Docker Compose 설정 파일
# version 필드는 Docker Compose v2부터 더 이상 필요하지 않음

services:
  # PostgreSQL 데이터베이스 서비스
  postgres:
    # 공식 PostgreSQL 16 이미지 (경량화된 alpine 버전)
    image: postgres:16-alpine
    container_name: orbithall-db
    # 호스트:컨테이너 포트 매핑 (로컬에서 5432 포트로 접근 가능)
    ports:
      - "5432:5432"
    # PostgreSQL 초기 설정 환경변수
    environment:
      POSTGRES_USER: orbithall           # 데이터베이스 사용자명
      POSTGRES_PASSWORD: dev_password    # 데이터베이스 비밀번호 (개발용)
      POSTGRES_DB: orbithall_db          # 생성할 데이터베이스 이름
    # 데이터 영속성을 위한 볼륨 마운트 (컨테이너 재시작 시에도 데이터 유지)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # 데이터베이스 준비 상태 확인 (API 서버 시작 전 DB가 준비될 때까지 대기)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orbithall"]
      interval: 5s    # 5초마다 체크
      timeout: 5s     # 5초 내 응답 없으면 실패
      retries: 5      # 5번 재시도

  # Go API 서버 서비스
  api:
    # 현재 디렉토리의 Dockerfile로 빌드 (development 스테이지 사용)
    build:
      context: .
      target: development
    container_name: orbithall-api
    # 호스트:컨테이너 포트 매핑 (로컬에서 8080 포트로 접근 가능)
    ports:
      - "8080:8080"
    # 애플리케이션 환경변수
    environment:
      # PostgreSQL 연결 문자열 (postgres 서비스명으로 접근)
      DATABASE_URL: postgres://orbithall:dev_password@postgres:5432/orbithall_db?sslmode=disable
      # CORS 허용 도메인 (Next.js 블로그 주소)
      CORS_ORIGIN: http://localhost:3000
      ENV: development
    # postgres 서비스가 healthy 상태가 될 때까지 대기
    depends_on:
      postgres:
        condition: service_healthy
    # 로컬 파일 변경을 컨테이너에 실시간 반영 (hot reload용)
    volumes:
      - ./:/app
    # 컨테이너 시작 시 go.sum 생성 후 Air 실행
    command: sh -c "go mod tidy && air -c .air.toml"

# 볼륨 정의 (데이터 영속성을 위한 명명된 볼륨)
volumes:
  postgres_data:
